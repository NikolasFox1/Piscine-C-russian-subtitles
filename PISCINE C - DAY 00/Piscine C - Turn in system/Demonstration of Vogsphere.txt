1
00:00:07,200 --> 00:00:11,240
Теперь, когда вы все прочитали документацию (а я надеюсь, что вы это сделали),

2
00:00:11,240 --> 00:00:13,000
мы сможем перейти к делу.

3
00:00:13,000 --> 00:00:17,920
Но прежде одна или две вещи. Во-первых, существует несколько разных способов использования гит (git).

4
00:00:17,920 --> 00:00:22,960
Вы прочитали это в документации: я могу создать репозиторий (хранилище) локально на своём маке,

5
00:00:22,960 --> 00:00:27,200
я могу скопировать репозиторий с компьютера друга,

6
00:00:27,200 --> 00:00:29,960
я могу клонировать локально репозиторий с моего компьютера,

7
00:00:29,960 --> 00:00:34,640
или я могу клонировать репозиторий с какого-то основного сервера и отправлять ему изменения.

8
00:00:34,640 --> 00:00:38,080
И это то, что мы делаем. Существует сервер под названием Вогшар,
(Vogsphere, отсылка к планете вогонов из «Автостопом по галактике», примечание переводчика).

9
00:00:38,080 --> 00:00:46,720
который будет автоматически создавать для вас репозиторий всякий раз, когда вы подписываетесь на проект, а затем даёт вам адрес в этот репозиторий через интрасеть.

10
00:00:46,720 --> 00:00:55,960
Вам просто нужно получить адрес в интрасети, клонировать ваш репозиторий, работать над ним, а затем отправлять изменения в Вогшар. Мы вернёмся к этому позже.

11
00:00:55,960 --> 00:01:01,800
Говоря о едином указателе ресурса (адресе URL), вы увидите, что путь хранилища, который я использую, может выглядеть так, как будто он происходит из ниоткуда,

12
00:01:01,800 --> 00:01:08,560
но это не так, я клянусь. Я просто знаю полный путь. Однако вам это знать не обязательно.

13
00:01:08,560 --> 00:01:13,560
Вам нужно будет зайти в интрасеть, чтобы получить ваш путь к репозиторию каждый раз, для каждого нового проекта.

14
00:01:13,560 --> 00:01:19,600
Теперь давайте откроем терминал. Мы начнём с самого начала, то есть клонирования, команды «git clone».

15
00:01:19,600 --> 00:01:27,760
Во-первых, вы должны задать, на каком сервере находится репозиторий, который вы хотите получить, то есть "Vogsphere: @ vogsphere.42.fr" или ".com".

16
00:01:27,760 --> 00:01:34,280
Вслед за двоеточием путь репозитория, как его даёт интрасеть. Мой адрес выглядит так и снова будто из ниоткуда.

17
00:01:34,280 --> 00:01:38,280
Свой ты увидишь в интрасети. Так или иначе, он всегда формируется одинаково:

18
00:01:38,280 --> 00:01:44,280
the module code/year/instance code/activity code/group leader's login.
код модуля / год / код экземпляра / код операции / логин группы.

19
00:01:44,280 --> 00:01:48,880
Будучи группой одного, я, разумеется, лидер моей собственной группы.

20
00:01:48,880 --> 00:01:58,280
Вы заметите, что я пишу «d00» в конце, чтобы он мог клонировать в папку с именем «d00», иначе он будет клонировать его в папку «mmontinet», и это отстой, потому что, как только я захочу клон другой папки,

21
00:01:58,280 --> 00:02:03,120
он не удалит существующую, но он скажет мне: «Я не могу, у вас уже есть папка с таким же именем».

22
00:02:03,120 --> 00:02:05,120
Поэтому назовите свой клон в конце строки.

23
00:02:05,120 --> 00:02:10,440
Чтобы сэкономить вам некоторое время, я также покажу вам несколько хитростей, которые облегчат вашу жизнь.

24
00:02:10,440 --> 00:02:16,440
Часть, предшествующая двоеточию, вам не нужно писать её настолько длинно, это всего лишь полный способ сделать это.

25
00:02:16,440 --> 00:02:21,960
Вы можете просто использовать «vogsphere.42.fr: something».

26
00:02:21,960 --> 00:02:28,400
Или вы даже можете использовать «vgs.42.fr: something», это короткое имя Vogsphere.

27
00:02:28,400 --> 00:02:35,240
Или вы также можете сделать это, как я, а я очень ленив: вы можете «git clone vgs: something».

28
00:02:35,240 --> 00:02:39,800
Он работает чудесно, и так я буду поступать в течении оставшегося урока.

29
00:02:39,800 --> 00:02:44,640
Если у вас когда-либо возникнут проблемы, просто используйте полную форму.

30
00:02:44,640 --> 00:02:49,680
Так я собираюсь сделать клон. Там ... сказано «клонирование в d00».

31
00:02:49,680 --> 00:02:53,560
Он выдаёт много сообщений, не волнуйтесь, это не сообщения об ошибках.

32
00:02:53,560 --> 00:03:02,720
Пока нет «ошибки» ("error"), это не ошибка. Все, что он говорит здесь, - это время, когда я начал свое взаимодействие: 5:33 вечера 26 июня 2013 года.

33
00:03:02,720 --> 00:03:09,030
Мы будем использовать это позже, я объясню это вам, когда закончим этот пример. В любом случае не беспокойтесь, это нормально.

34
00:03:09,030 --> 00:03:15,480
Теперь я могу войти в d00, который будет моим рабочим репозиторием, то есть локальной копией моего хода в репозитории.

35
00:03:15,480 --> 00:03:19,520
Я собираюсь работать в нем. В качестве примера я собираюсь создать файл test.c.

36
00:03:19,520 --> 00:03:21,480
Я просто собираюсь записать main в него,

37
00:03:25,200 --> 00:03:32,160
который (main) ничего не будет делать, это не имеет значения. Мы сохраним его, а затем, чтобы гит произвёл учёт, мы должны сказать, что нас интересует именно этот файл.

38
00:03:32,160 --> 00:03:46,040
Мы можем быстро проверить статус гит (команда git status), чтобы убедиться, если я зафиксирую (commit), git ничего не сделает. Он скажет, что есть файл test.c, но не отслеживается (untracked). Так что гит не учитывает его на данный момент.

39
00:03:46,040 --> 00:03:50,040
Чтобы гит взял в рассмотрение этот файл я ввожу команду "git add test.c".

40
00:03:50,040 --> 00:03:56,360
Мы можем видеть в статусе гит (git status) изменения, которые должны быть зафиксированы во время следующей фиксации (git commit).

41
00:03:56,360 --> 00:04:05,720
Теперь я буду использовать «git commit -m» для создания test.c. «-m», чтобы записать сообщение фиксации непосредственно в командной строке.

42
00:04:05,720 --> 00:04:09,520
Я не обязан писать, но я лучше сделаю это сейчас (ленив), чем буду потом открывать заголовок (header).

43
00:04:09,520 --> 00:04:17,000
Там: гит фиксирует «создание test.c». Он создал файл и сопровождающую запись.

44
00:04:17,000 --> 00:04:22,080
Если вы посмотрите на статус гит сейчас, то увидите, что больше нечего делать.

45
00:04:22,080 --> 00:04:33,760
Я могу изменить что-нибудь, например, я могу изменить свой test.c, добавив ft_putchar из f непосредственно перед возвратом.

46
00:04:33,760 --> 00:04:44,880
Теперь он сообщает, что это не неотслеживаемый файл, но есть изменения, которые не были зафиксированы (commit), потому что каждый раз, когда вы что-то меняете, вы должны сообщить гиту, что это важно для вас.

47
00:04:44,880 --> 00:04:47,920
Now we "git add test.c."
Теперь мы «git add test.c.»

48
00:04:47,920 --> 00:04:52,920
Затем я снова фиксирую: «модификации test.c».

49
00:04:52,920 --> 00:05:01,040
Сообщения о фиксации, которые я пишу, немного грубы, в реальной жизни, требуется оставлять более длинные записи, чтобы облегчить себе навигацию по истории изменений.

50
00:05:01,040 --> 00:05:12,440
Я что-то сделал, это прекрасно, но для того, чтобы всё работало хорошо, мы должны отправить их на сервер. Потому что прямо сейчас, учёт ведётся только на моём компьютере, Вогшар ничего не знает о них.

51
00:05:12,440 --> 00:05:19,840
To do this, as you've read in the documentation, we use the "git push" command to push our modifications to the server.
Для этого, как вы читали в документации, мы используем команду «git push», чтобы поместить наши изменения на сервере.

52
00:05:19,840 --> 00:05:24,960
Позже мы также сможем использовать «git pull», чтобы получить изменения с сервера.

53
00:05:24,960 --> 00:05:31,280
Теперь будем размещать («git push»). Если я сейчас скомандую "разместить", это не сработает по очень простой причине:

54
00:05:31,280 --> 00:05:42,480
во время первого нажатия, мы должны сказать гиту, что является пунктом назначения (нызвается "источник", по англ. "origin"), а что веткой (branch), которую мы хотим отправить (это «мастер» - "master").

55
00:05:42,480 --> 00:05:50,240
Если вы не понимаете, не беспокойтесь. Вам просто нужно помнить, что в первый раз, когда вы размещаете, пишите «git push origin master», а в остальное время - «git push».

56
00:05:50,240 --> 00:05:57,320
Теперь он говорит: «Хорошо, я только что отправил новую главную ветку в хранилище!» ("ok I've just sent a new master branch on the repository!"), и это хорошо.

57
00:05:57,320 --> 00:06:03,080
Важное: размещение (push) - это не то, что вы делаете один раз, а потом всё кончено.

58
00:06:03,080 --> 00:06:06,080
Вы можете делать это столько раз, сколько хотите, с этим нет проблем.

59
00:06:06,080 --> 00:06:12,600
Вот, например, я могу создать файл text.txt с ерундой в нём.

60
00:06:12,600 --> 00:06:24,000
Я могу добавить его, зафиксировать с надписью «бесполезный файл», и я могу повторить размещение, на этот раз без указания "origin master", вы увидите.

61
00:06:24,000 --> 00:06:28,200
Оттправлены файлы в Вогшар.

62
00:06:28,200 --> 00:06:37,160
Однако у вас могут быть некоторые сомнения, вы можете задаться вопросом: «а, отправка сработала?» и т. д., ну вы можете проверить, что именно было сделано.

63
00:06:37,160 --> 00:06:46,960
Легко повторить, вам просто нужно снова скомандовать "git clon", но вместо того, чтобы клонировать его в файл «d00», который уже существует, я буду клонировать его в «d00-verification».

64
00:06:46,960 --> 00:06:55,760
Как только вы попадаете в свой новый клон, всё, что есть здесь, является именно тем, что существует сданным (turn in) в вашем хранилище (репозитории).

65
00:06:55,760 --> 00:07:03,720
Это также будет получено вашим проверяющим, независимо от того, является ли он человеком или Муленеттой.

66
00:07:03,720 --> 00:07:09,800
Я предупреждаю: только то, что находится в репозитории на стороне Вогшара, будет проверено и исправлено.

67
00:07:09,800 --> 00:07:16,520
Если есть что-то ещё, если вы забыли включить или если «я забыл некоторые изменения, тра-та-та ...», невзирая на подобное, это не будет расмматриваться.

68
00:07:16,520 --> 00:07:19,640
Поэтому будьте осторожны, не обманывайтесь.

69
00:07:19,640 --> 00:07:28,240
Теперь, после того как я многое разъяснил о такой простой вещи, пришло время небольшого примера.

70
00:07:28,240 --> 00:07:35,720
but shorter so you can see what it looks like without any parasites.
Короткого, чтобы вы могли видеть, как это выглядит без посторонних включений.

71
00:07:35,720 --> 00:07:44,880
Начнём с начала. Во-первых, давайте сделаем клон. Затем мы клонируем наш репозиторий из хранилища Вогшары.

72
00:07:48,560 --> 00:07:50,780
При клонировании он сообщает, где предполагается создать новый клон.

73
00:07:51,620 --> 00:08:00,320
Я вхожу в новую папку, я делаю что-то на подобие создания файлов.

74
00:08:03,320 --> 00:08:05,500
Добавляю файлы с "git add".

75
00:08:05,500 --> 00:08:09,840
Фиксирую файлы, которые подлежат пересмотру, с помощью "git commit"

76
00:08:09,840 --> 00:08:13,240
с лучшими, более ясными комментариями, чем то, что я делал (так было бы лучше).

77
00:08:13,240 --> 00:08:17,280
Затем мы вводим новые изменения на сервер с помощью «git push».

78
00:08:17,280 --> 00:08:22,840
Теперь всё сделано. Изменения, которые я сделал, теперь находятся в папке сдачи (turn in folder).

79
00:08:22,840 --> 00:08:24,840
И если я когда-нибудь захочу убедиться,

80
00:08:24,840 --> 00:08:34,480
Я могу сделать клон - ещё один - точно так же, как я это уже делал, и зайти в него, чтобы проверить и убедиться, что всё здесь.

81
00:08:34,480 --> 00:08:40,600
cat «tata.txt», он здесь, всё в порядке, без проблем, я чудесным образом сдал (turn in).

82
00:08:40,600 --> 00:08:44,440
Еще несколько важных замечаний.

83
00:08:44,440 --> 00:08:52,440
Во-первых, как я уже говорил ранее, Муленетту, а также как вашего проверяющего человека, кем бы он ни был,

84
00:08:52,440 --> 00:08:57,840
когда он исправляет вас, его интересует только то, что находится в вашем хранилище.

85
00:08:57,840 --> 00:09:04,040
Если вы когда-нибудь скажете «ууух, да, но я забыл сделать это» или «ну-у-у-у, есть небольшая модификация, которую я забыл добавить...»,

86
00:09:04,040 --> 00:09:05,040
это не сработает.

87
00:09:05,040 --> 00:09:08,360
"Нет" оправданиям, только то, что сдано (turn in) в хранилище имеет значение, ничего больше.

88
00:09:08,360 --> 00:09:12,240
Я знаю, что я много повторяю, но это очень, очень, очень важно.

89
00:09:12,240 --> 00:09:15,120
Вы должны исключить ошибки, о которых я упоминул.

90
00:09:15,120 --> 00:09:19,800
Также, когда вы будете работать в группах - подход тот же, как когда это сделано в одиночку. И это прекрасно!

91
00:09:19,800 --> 00:09:26,320
Когда вы будете работать в группах, вы столкнётесь с проблемой, которая исходит из синхронизации рабочей копии каждого члена группы.

92
00:09:26,320 --> 00:09:30,960
Это легко разрешается командой «git pull».

93
00:09:30,960 --> 00:09:34,800
Я больше не буду говорить об этом, далее прибегайте к документации, если хотите узнать больше.

94
00:09:34,800 --> 00:09:44,040
Во-вторых, сервер Вогшар (Vogsphere) накладывает ограничение размера на репозиторий сдачи (turn in repository), и этот предел составляет 100 Мб.

95
00:09:44,040 --> 00:09:48,520
Как правило, вы даже не приближаетесь к 100Mb в репозитории.

96
00:09:48,520 --> 00:09:58,120
Однако, если вы начнёте вкладывать много материала в свой репозиторий, выходить за пределы 100Mb, это расценивается злоупотреблением ресурсами,

97
00:09:58,120 --> 00:10:00,560
и строго наказывается.

98
00:10:00,560 --> 00:10:02,720
Поэтому я советую вам не делать этого.

99
00:10:02,720 --> 00:10:08,000
Возможно, вы заметили, когда я клонировал

100
00:10:08,000 --> 00:10:09,760
я собираюсь сделать это снова, чтобы вы могли видеть,

101
00:10:13,640 --> 00:10:17,600
Появляется сообщение о том, что «эта транзакция была запущена в / такое-то время /»

102
00:10:17,600 --> 00:10:26,160
Это время, когда сервер считает, что вы всё ещё имеете право (а может статься, что нет) разменщать в свой репозиторий.

103
00:10:26,160 --> 00:10:29,600
Да, каждый проект имеет срок сдачи.

104
00:10:29,600 --> 00:10:32,640
И когда он наступит,

105
00:10:32,640 --> 00:10:37,560
в это самое время, вы больше не сможете что-то заливать в свой репозиторий.

106
00:10:37,560 --> 00:10:49,920
Эта дата и время позволяют подключиться к серверу, за 30 секунд или 10 секунд до истечения срока.

107
00:10:49,920 --> 00:11:03,320
Вам будет сказано «хорошо, это началось в 11:41 и 50 секунд», поэтому даже если взаимодействие займёт очень много времени, например, если ваша тысяча однокурсников толкает в то же время -

108
00:11:03,320 --> 00:11:05,680
сумасшествие, конечно, но вдруг! -

109
00:11:05,680 --> 00:11:10,520
время, установленное для проверки того, есть ли ещё у вас доступ, соотноситься со временем начала размещения.

110
00:11:10,520 --> 00:11:14,960
так что даже если ваша заливка длится 5 минут и заканчивается в 11:46 вечера,

111
00:11:14,960 --> 00:11:20,560
даже если срок ограничен 11:42 вечера, не важно, я начал до 11:42 вечера, так что всё в порядке.

112
00:11:20,560 --> 00:11:23,800
Единственное, что имеет значение, это то, что вы разрешаете исполнению команды дойти до конца, не прерывая связь.

113
00:11:23,800 --> 00:11:27,040
Не нажимайте ctrl + C, чтобы отменить клон, клонируя его,

114
00:11:27,040 --> 00:11:31,520
потому что, если вы перезапустите клонирование, ну тогда, может быть, срок окончания истечёт, и ничто не спасет вас.

115
00:11:31,520 --> 00:11:37,120
Кроме того, вы, возможно, заметили, когда много людей работают с гитом одновременно,

116
00:11:37,120 --> 00:11:42,720
это случается редко, но гит скажет вам, что вы поставлены в очередь ожидания, как только ваше взаимодействие началось.

117
00:11:42,720 --> 00:11:47,760
То же самое, не паникуйте и не прерывайте связь, гит только говорит вам: «В настоящий момент я слишком занят, пожалуйста, просто дождитесь своей очереди».

118
00:11:47,760 --> 00:11:55,560
Гит регулярно обновляется, чтобы сообщить вам: «Есть ещё некоторое количество людей до вас в очереди, пожалуйста, подождите». Ещё раз, не волнуйтесь, это нормально.

119
00:11:55,560 --> 00:12:05,640
Last few things. The authentication on the server is done by using a Kerberos ticket.
Последние несколько вещей. Аутентификация на сервере выполняется с использованием билета Керберос (Kerberos ticket).

120
00:12:05,640 --> 00:12:09,280
Это то, что вы автоматически получаете при каждом входе в систему на компьютере.

121
00:12:09,280 --> 00:12:14,840
Но билет Керберос, как вы это должны осознавать рано или поздно, истекает через определённое время.

122
00:12:14,840 --> 00:12:20,080
И иногда вам нужно его обновить, при возникшем желании убеиться, что у вас он есть.

123
00:12:20,080 --> 00:12:26,600
Я покажу вам пример того, как это сделать. Вы можете выполнить команду «klist», в которой будет указан список всех ваших билетов.

124
00:12:26,600 --> 00:12:31,880
Например, здесь сказано, что у меня есть билет Керберос, который истекает 27 июня в 03:00.

125
00:12:31,880 --> 00:12:37,040
Это помогает: я собираюсь искусственно уничтожить его, чтобы показать вам, что происходит, когда у вас нет билетов.

126
00:12:37,040 --> 00:12:39,880
после «kdestroy», вы увидите, у меня больше не будет билетов.

127
00:12:39,880 --> 00:12:45,680
Теперь, если я попытаюсь склонировать, он скажет мне «PD», что означает «разрешение отклонено».

128
00:12:45,680 --> 00:12:51,560
В таком случае, что мне делать? Я использую команду «kinit» с моим логином и моим паролем, чтобы получить новый билет.

130
00:12:54,000 --> 00:13:00,400
«klist» снова - теперь вы видите, что у меня есть билет, и тогда мне разрешено клонировать, всё чудесно.

131
00:13:00,400 --> 00:13:04,680
Поэтому, когда вы столкнётесь с этой проблемой, знайте, что решением является «kinit».

132
00:13:04,680 --> 00:13:08,720
Последнее, что вы ещё не видели, потому что я этого не делал раньше,

133
00:13:08,720 --> 00:13:12,680
у вас его не будет, когда вы будете использовать свой компьютер в первый раз, так что вам придётся делать это самостоятельно,

134
00:13:12,680 --> 00:13:18,480
Когда вы хотите совершить фиксацию, вам скажут: «Я не знаю вашего имени и вашего эл. почты, поэтому я создал его для вас автоматически.

135
00:13:18,480 --> 00:13:24,440
Он напечатает вам длиннючее сообщение об ошибке, чтобы предложить вам настроить ваш гит и т. д.

136
00:13:24,440 --> 00:13:28,240
На самом деле это очень просто, всего две команды для запуска, к тому же он сам даёт их вам.

137
00:13:28,240 --> 00:13:32,920
Поэтому, когда вы это увидите, не волнуйтесь, вы ничего не сломали, просто делайте, что говорят,

138
00:13:32,920 --> 00:13:35,640
напишите своё первое и второе имя и адрес электронной почты, которые сделают гит счастливым.

139
00:13:35,640 --> 00:13:40,600
Так. Мы говорили почти обо всём, что вам нужно знать, чтобы использовать Вогшар.

140
00:13:40,600 --> 00:13:44,520
Я действительно призываю вас ещё раз прочитать документацию.

141
00:13:44,520 --> 00:13:46,520
на git-scm.com.

142
00:13:46,520 --> 00:13:50,200
Потому что, в конце концов, гит - действительно реально развитая система,

143
00:13:50,200 --> 00:13:54,720
у которой есть куда больше возможностей, чем в приведённом моём жалком примере.

144
00:13:54,720 --> 00:13:58,280
Это было просто необходимо для управления доставкой чего-либо.

145
00:13:58,280 --> 00:14:02,040
Однако вы можете сделать ещё много удивительных вещей с гит, если знаете, как им пользоваться.

146
00:14:02,040 --> 00:14:08,840
Было бы настоящим позором не сообщить вам об этом и не использовать каждую возможность этого замечательного программного обеспечения.

147
00:14:08,840 --> 00:14:16,160
Я поджалуй завершу с пропагандой гита и пожелаю вам прекрасного дня, и увидимся в следующий раз!

